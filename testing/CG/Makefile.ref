#HEADER
# ************************************************************************
# 
#               HPCG: High Performance Conjugate Gradient Code
# Questions? Contact Michael A. Heroux (maherou@sandia.gov) 
# 
# ************************************************************************
#@HEADER


# Simple hand-tuned makefile.  Modify as necessary for your environment.
# Questions? Contact Mike Heroux (maherou@sandia.gov).
#

#
# Specific source location
SRC = ../../src
#
# Specify compiler and linker:

CXX=g++
LINKER=g++
CXX=mpicxx
LINKER=mpicxx
#CXX=/usr/local/bin/g++
#LINKER=/usr/local/bin/g++
CXX=/usr/local/openmpi-gcc-4.8/bin/mpicxx
LINKER=/usr/local/openmpi-gcc-4.8/bin/mpicxx


#    If you want to run the program without MPI, make sure NOMPI is set 
#    to -DHPCG_NOMPI
NOMPI = 
#NOMPI = -DHPCG_NOMPI

#    If you want to run the program without OpenMP, make sure NOOPENMP is set 
#    to -DHPCG_NOOPENMP
#NOOPENMP = 
NOOPENMP = -DHPCG_NOOPENMP

INCLUDES = -I$(SRC)


#CPP_OPT_FLAGS = -O3 -funroll-all-loops -malign-double
#CPP_OPT_FLAGS = -O3 -m64
#CPP_OPT_FLAGS = -O3 -ftree-vectorize -ftree-vectorizer-verbose=2 -fopenmp
CPP_OPT_FLAGS = -O0 -g
#CPP_OPT_FLAGS = -O0 -g -DDEBUG -fopenmp
#CPP_OPT_FLAGS = -O0 -g -DDEBUG -DNO_PRECONDITIONER
#CPP_OPT_FLAGS = -O0 -g -DNO_PRECONDITIONER
#CPP_OPT_FLAGS = -O3 -fopenmp
CPP_OPT_FLAGS = -O3 -ffast-math -ftree-vectorize -ftree-vectorizer-verbose=1


TARGET = HPCG-CGTest

################### Derived Quantities (no modification required) ##############

CXXFLAGS= $(CPP_OPT_FLAGS) $(NOMPI) $(NOOPENMP) $(INCLUDES)

TEST_CPP = CGTest.cpp ReportResults.cpp \
           $(SRC)/GenerateGeometry.cpp $(SRC)/GenerateProblem.cpp \
	  	   $(SRC)/WriteProblem.cpp $(SRC)/ComputeResidual.cpp $(SRC)/mytimer.cpp \
	   $(SRC)/spmvref.cpp $(SRC)/symgsref.cpp \
           $(SRC)/spmv.cpp $(SRC)/CG.cpp $(SRC)/waxpby.cpp $(SRC)/dot.cpp $(SRC)/symgs.cpp \
           $(SRC)/OptimizeMatrix.cpp $(SRC)/ExchangeHalo.cpp \
           $(SRC)/YAML_Element.cpp $(SRC)/YAML_Doc.cpp

TEST_OBJ          = $(TEST_CPP:.cpp=.o)
all: $(TARGET)

$(TARGET): $(TEST_OBJ)
	$(LINKER) $(CPP_OPT_FLAGS) $(TEST_OBJ) $(LIB_PATHS) -o $(TARGET)

clean:
	@rm -f $(TEST_OBJ) *~ $(TARGET)
